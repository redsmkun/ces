trojan://djhguyHUG7@gcphk.bluesmkun.eu.org:7859?security=tls&type=tcp&headerType=none#HK-GCP
trojan://RD4AbQFvSd@gcpus.bluesmkun.eu.org:32777?flow=undefined&security=tls&sni=gcpus.bluesmkun.eu.org&type=tcp&headerType=none#US-GCP
trojan://SUIjimima@usid.bluesmkun.eu.org:8443?security=tls&type=tcp&headerType=none#US-ID
trojan://SUIjimima@uscc.bluesmkun.eu.org:8443?security=tls&type=tcp&headerType=none#US-CC
trojan://ZfS7XNuWx4@hnhk.bluesmkun.eu.org:53896?security=tls&sni=hnhk.bluesmkun.eu.org&type=tcp&headerType=none#HK-HN
trojan://ejn4OsLl9j@usvs.bluesmkun.eu.org:11509?security=tls&sni=usvs.bluesmkun.eu.org&type=tcp&headerType=none#US-VS
trojan://SUIjimima@ocsg1.bluesmkun.eu.org:56777?security=tls&type=tcp&headerType=none#SG-OC1
trojan://SUIjimima@ocsg3.bluesmkun.eu.org:56777?security=tls&type=tcp&headerType=none#SG-OC3
trojan://HboVbh9QZJ@awssg.bluesmkun.eu.org:6745?security=tls&type=tcp&headerType=none#SG-AWS-NF
vmess://ew0KICAidiI6ICIyIiwNCiAgInBzIjogIkhLLUhOLUNETi1jbG9uZSIsDQogICJhZGQiOiAiMTczLjI0NS40OS4xODEiLA0KICAicG9ydCI6ICI4MCIsDQogICJpZCI6ICI5ODJmODIxZi04M2E1LTQ2YTMtYzBmNy01Y2VjMjIxMWY1YWEiLA0KICAiYWlkIjogIjAiLA0KICAic2N5IjogImF1dG8iLA0KICAibmV0IjogIndzIiwNCiAgInR5cGUiOiAibm9uZSIsDQogICJob3N0IjogImhuaGsuY2RudnBzLmNmIiwNCiAgInBhdGgiOiAiL3JheSIsDQogICJ0bHMiOiAiIiwNCiAgInNuaSI6ICIiLA0KICAiYWxwbiI6ICIiDQp9
